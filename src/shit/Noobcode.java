package shit;

public class Noobcode {
    public static void main(String[] args) {
        // База
        System.out.println("Всегда ставить фигурные скобки, так Сашка сказал, и не ставит их на sout");
        System.out.println("Имена переменных всегда с маленькой буквы");

        // Полезные комбы
        System.out.println("\nCTRL + ALT + L = группировать код");
        System.out.println("CTRL + D = копировать строчку с кодом");

        // Сокращения
        System.out.println("\nsout = system out println");
        System.out.println("psvm = public static void main");

        //Операции отношения
        System.out.println("\n< - Меньше");
        System.out.println("> - Больше");
        System.out.println("== - Равно");

        System.out.println();

        /*
        Разделительные символы
         () - Применяется для указания списков параметров в определениях и вызовах методов.
         Также используется для определения порядка выполнения операция в обычных выражениях, выражениях
         внутри управляющих операторов и при приведении типов.
         {} - Применяется для указания значений автоматически инициализируемых массивов. Также используется
         для определения блоков кода, классов, методов и локальных областей действия.
         [] - Применяется для объявления типов массивов. Используется для разыменования значений массива.
         ; - Завершает операторы.
         , - Отделяет последовательно следующие друг за другом идентификаторы при объявлении переменных.
         Также применяется для объединения операторов внутри for.
         . - Используется для отделения имен пакетов от имен подпакетов и классов. Также применяется для отделения
         имени переменной или метода от имени ссылочной переменной.
         :: - Используется для создания ссылки на метод или конструктор.
         ... - Указывает параметр с переменным количеством аргументов.
         @ - "эт", начинает аннотацию.
        */
        System.out.println();

        // Побитовые операции
        // Присваивание - это знак "="
        System.out.println("\n~ - Побитовое унарное НЕ"); // инвертирует все 0 в 1 а все 1 в 0
        System.out.println("& - Побитовое И"); // всегда замещает нулем бит, если в одном из значений есть 0
        System.out.println("| - Побитовое ИЛИ"); // всегда замещает единицей бит, если в одном из значений есть 1
        System.out.println("^ - Побитовое исключающее ИЛИ (XOR)"); // тоже самое что ИЛИ, только если 2 бита одинаковые, заменяет на 0
        System.out.println(">> - Сдвиг вправо"); // автоматически заполняет старший бит его предыдущим содержимым каждый раз,
        // когда происходит сдвиг, сохраняя знак значения
        System.out.println(">>> - Сдвиг вправо с заполнением нулями"); //всегда задвигает нули в старший бит
        System.out.println("&= - Побитовое И с присваиванием");
        System.out.println("|= - Побитовое ИЛИ с присваиванием");
        System.out.println("^= - Побитовое исключающее ИЛИ с присваиванием");
        System.out.println(">>= - Сдвиг вправо с присваиванием");
        System.out.println(">>>= - Сдвиг вправо с заполнением нулями и присваиванием");
        System.out.println("<<= - Сдвиг влево с присваиванием");

        // Арифметические операции
        System.out.println("\n+ - Сложение/унарный плюс");
        System.out.println("- - Вычитание/унарный минус");
        System.out.println("* - Умножение");
        System.out.println("/ - Деление");
        System.out.println("% - Деление по модулю");
        System.out.println("++ - Инкремент");
        System.out.println("-- - Декремент");
        System.out.println("+= - Сложение с присваиванием");
        System.out.println("-= - Вычитание с присваиванием");
        System.out.println("*= - Умножение с присваиванием");
        System.out.println("/= - Деление с присваиванием");

        System.out.println();

        // Символьные управляющие последовательности
        // \ddd - Восьмеричный символ (ddd)
        // \ uxxxx - Шестнадцатеричный символ Unicode (xxxx) (без пробела)
        // \' - Одинарная кавычка
        // \" - Двойная кавычка
        // ,\\ - Двойная косая черта
        // \r - Возврат каретки
        // \n - Новая строка (перевод строки)
        // \f - Подача страницы
        // \t - Табуляция
        // \b - Забой
        // \s - Пробел
        // \конец-строки -Строка продолжения (применяется только к текстовым блокам)
        // \%Ns количество символов для строки (N = число)
        // \%NRd количество символов для чисел (Decimal) N = на что менять, R = количество символов

        System.out.println();

        // Операции отношения
        // == - Равно
        // != - Не равно
        // > - Больше
        // < - Меньше
        // >= - Больше или равно
        // <= - Меньше или равно

        System.out.println();

        // Логические операции Boolean
        // & - Логическое И - если одно из значений False, будет False
        // | - Логическое ИЛИ - если одно из значение True, будет True
        // ^ - Логическое исключающее ИЛИ - если одно из значение True, будет True. Если оба True - будет False
        // || - Короткозамкнутое ИЛИ
        // && - Короткозамкнутое И
        // ! - Логическое унарное НЕ - меняет true на false и наоборот
        // &= - Логическое И с присваиванием
        // |= - Логическое ИЛИ с присваиванием
        // ^= - Логическое исключающее ИЛИ с присваиванием
        // == - Равно
        // != - Не равно
        // ?: - Тернарная операция "если-то-иначе"

        //Старшинство операций по порядку
        System.out.println("Приоритетность операций: ");
        System.out.println("\n1. ++/-- (постфикс)");
        System.out.println("2. ++/-- (префикс), ~, !, +/- (унарный), (приведение типа)");
        System.out.println("3. *, /, %");
        System.out.println("4. +/-");
        System.out.println("5. >>, >>>, <<");
        System.out.println("6. >, >=, <, <=, instanceof");
        System.out.println("7. &");
        System.out.println("8. ==, !=");
        System.out.println("9. ^");
        System.out.println("10. |");
        System.out.println("11. &&");
        System.out.println("12. ||");
        System.out.println("13. ?:");
        System.out.println("14. ->");
        System.out.println("15. =, операция =");

    }
}
